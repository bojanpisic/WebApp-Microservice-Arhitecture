// <auto-generated />
using System;
using AirlineMicroservice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AirlineMicroservice.Migrations
{
    [DbContext(typeof(AirlineContext))]
    [Migration("20210315215404_finalMigration")]
    partial class finalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AirlineMicroservice.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Lon")
                        .HasColumnType("double");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AddressId");

                    b.HasIndex("AirlineId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Airline", b =>
                {
                    b.Property<int>("AirlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("LogoUrl")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PromoDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AirlineId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.AirlineDestination", b =>
                {
                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("AirlineId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("AirlineDestination");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.AirlineRate", b =>
                {
                    b.Property<int>("AirlineRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AirlineRateId");

                    b.HasIndex("AirlineId");

                    b.ToTable("AirlineRates");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("ImageUrl")
                        .HasColumnType("longblob");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DestinationId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FromDestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LandingDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TakeOffDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ToDestinationId")
                        .HasColumnType("int");

                    b.Property<string>("TripTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("tripLength")
                        .HasColumnType("float");

                    b.HasKey("FlightId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FromDestinationId");

                    b.HasIndex("ToDestinationId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.FlightDestination", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.HasKey("DestinationId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightsAddresses");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.FlightRate", b =>
                {
                    b.Property<int>("FlightRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("FlightRateId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightRates");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.FlightReservation", b =>
                {
                    b.Property<int>("FlightReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsCarRented")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("FlightReservationId");

                    b.ToTable("FlightReservations");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Class")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Column")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Reserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Row")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("SpecialOfferId")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SpecialOfferId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("NewPrice")
                        .HasColumnType("float");

                    b.Property<float>("OldPrice")
                        .HasColumnType("float");

                    b.HasKey("SpecialOfferId");

                    b.HasIndex("AirlineId");

                    b.ToTable("SpecialOffers");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Passport")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ReservationFlightReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ReservationFlightReservationId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Ticket2", b =>
                {
                    b.Property<int>("Ticket2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Passport")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ReservationFlightReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("Ticket2Id");

                    b.HasIndex("ReservationFlightReservationId");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.ToTable("Tickets2");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Address", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Airline", "Airline")
                        .WithOne("Address")
                        .HasForeignKey("AirlineMicroservice.Models.Address", "AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineMicroservice.Models.AirlineDestination", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Airline", "Airline")
                        .WithMany("Destinations")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineMicroservice.Models.Destination", "Destination")
                        .WithMany("Airlines")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineMicroservice.Models.AirlineRate", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Airline", "Airline")
                        .WithMany("Rates")
                        .HasForeignKey("AirlineId");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Flight", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineMicroservice.Models.Destination", "From")
                        .WithMany("From")
                        .HasForeignKey("FromDestinationId");

                    b.HasOne("AirlineMicroservice.Models.Destination", "To")
                        .WithMany("To")
                        .HasForeignKey("ToDestinationId");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.FlightDestination", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Destination", "Destination")
                        .WithMany("Flights")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineMicroservice.Models.Flight", "Flight")
                        .WithMany("Stops")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineMicroservice.Models.FlightRate", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Flight", "Flight")
                        .WithMany("Rates")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Seat", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightId");

                    b.HasOne("AirlineMicroservice.Models.SpecialOffer", "SpecialOffer")
                        .WithMany("Seats")
                        .HasForeignKey("SpecialOfferId");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.SpecialOffer", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.Airline", "Airline")
                        .WithMany("SpecialOffers")
                        .HasForeignKey("AirlineId");
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Ticket", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.FlightReservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationFlightReservationId");

                    b.HasOne("AirlineMicroservice.Models.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("AirlineMicroservice.Models.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineMicroservice.Models.Ticket2", b =>
                {
                    b.HasOne("AirlineMicroservice.Models.FlightReservation", "Reservation")
                        .WithMany("UnregistredFriendsTickets")
                        .HasForeignKey("ReservationFlightReservationId");

                    b.HasOne("AirlineMicroservice.Models.Seat", "Seat")
                        .WithOne("Ticket2")
                        .HasForeignKey("AirlineMicroservice.Models.Ticket2", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
